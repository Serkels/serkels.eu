//

//
//
//

//
//
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
  output          = "../.prisma/client"
}

//
//
//

//
//#region üë• User
//

model SignupPayload {
  role    ProfileRole
  name    String
  email   String              @unique
  tokens  VerificationToken[]
  context Json
}

model Profile {
  bio           String?
  blacklist     Blacklist[]    @relation("BlacklistedProfiles")
  bookmarks     Bookmark[]
  contacts      Profile[]      @relation("Contacts")
  id            String         @id @default(cuid())
  image         String
  is_online     Boolean        @default(false)
  name          String
  notifications Notification[]
  role          ProfileRole
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String         @unique @map("userId")

  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  blacklisted_by         Blacklist[] @relation("BlacklistedBy")
  in_contact_with        Profile[]   @relation("Contacts")
  participants_in_thread Thread[]    @relation("ParticipantsInThread")
  partner                Partner?
  student                Student?
  written_messages       Message[]   @relation("WrittenMessages")

  added_notifications ProfileAddedNotification[] @relation("AddedNotifications")
}

model Student {
  id             String     @id @default(cuid())
  language       String?
  city           String?
  field_of_study String?
  interest       Category[] @relation("CategorizedStudentInterest")
  profile        Profile    @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id     String     @unique
  university     String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  asked_questions      Question[]       @relation("AskedQuestions")
  exchange_threads     ExchangeThread[]
  given_answers        Answer[]         @relation("GivenAnswers")
  inbox_threads        InboxThread[]
  participants_in_deal Deal[]
  proposed_exchanges   Exchange[]       @relation("ProposedExchanges")
}

model Partner {
  id            String        @id @default(cuid())
  city          String?
  link          String
  opportunities Opportunity[]
  profile       Profile       @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id    String        @unique
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Blacklist {
  owner      Profile @relation("BlacklistedProfiles", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id   String
  profile    Profile @relation("BlacklistedBy", fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  //
  created_at DateTime @default(now())

  @@unique([profile_id, owner_id])
}

//

enum ProfileRole {
  ADMIN
  PARTNER
  STUDENT
}

//
//#endregion
//

//
//#region üîñ Bookmark
//

model Bookmark {
  id             String       @id @default(cuid())
  exchange       Exchange?    @relation("BookmarkedExchanges", fields: [exchange_id], references: [id], onDelete: SetNull)
  exchange_id    String?
  opportunity    Opportunity? @relation("BookmarkedOpportunities", fields: [opportunity_id], references: [id], onDelete: SetNull)
  opportunity_id String?
  owner          Profile      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id       String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  @@unique(fields: [owner_id, exchange_id], name: "bookmarked_exchange")
  @@unique(fields: [owner_id, opportunity_id], name: "bookmarked_opportunity")
}

//
//#endregion
//

//
//#region üìö Category
//

model Category {
  id      String           @id @default(cuid())
  context CategoryContext? @default(EXCHANGE)
  rank    Int?
  name    String
  slug    String
  //

  categorized_exchanges        Exchange[]    @relation("CategorizedExchanges")
  categorized_opportunities    Opportunity[] @relation("CategorizedOpportunities")
  categorized_questions        Question[]    @relation("CategorizedQuestions")
  categorized_return_exchanges Exchange[]    @relation("CategorizedReturnExchanges")
  categorized_student_interest Student[]     @relation("CategorizedStudentInterest")
  //

  @@unique(fields: [slug, context], name: "slug_in_context")
}

enum CategoryContext {
  EXCHANGE
  OPPORTUNITY
  FORUM
}

//
//#endregion
//

//
//#region üîÑ Exchange
//

model Exchange {
  id          String       @id @default(cuid())
  category    Category     @relation("CategorizedExchanges", fields: [category_id], references: [id], onDelete: Cascade)
  category_id String
  deals       Deal[]
  description String
  expiry_date DateTime?
  is_active   Boolean
  is_online   Boolean
  location    String?
  owner       Student      @relation("ProposedExchanges", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  places      Int
  return      Category?    @relation("CategorizedReturnExchanges", fields: [return_id], references: [id], onDelete: SetNull)
  return_id   String?
  title       String
  type        ExchangeType

  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  bookmarked_exchanges Bookmark[] @relation("BookmarkedExchanges")

  message_notifications ExchangeMessageNotification[]
}

enum ExchangeType {
  PROPOSAL
  RESEARCH
}

model Deal {
  id             String               @id @default(cuid())
  status         ExchangeThreadStatus @default(IDLE)
  parent         Exchange             @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id      String
  participant    Student              @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  exchange_threads ExchangeThread[]
  //

  @@unique(name: "participant_per_exchange", fields: [parent_id, participant_id])
}

model ExchangeThread {
  id             String   @id @default(cuid())
  is_archived    Boolean  @default(false)
  last_seen_date DateTime @default(now())

  deal      Deal    @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  deal_id   String
  owner     Student @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id  String
  thread    Thread  @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String

  @@unique([owner_id, deal_id])
  @@unique([owner_id, thread_id])
}

enum ExchangeThreadStatus {
  IDLE
  DENIED
  APPROVED_BY_THE_ORGANIZER
  APPROVED
}

//
//#endregion
//

//
//#region üì¶ Opportunity
//

model Opportunity {
  id          String   @id @default(cuid())
  category    Category @relation("CategorizedOpportunities", fields: [category_id], references: [id], onDelete: Cascade)
  category_id String
  cover       String
  description String
  expiry_date DateTime
  link        String
  location    String?
  owner       Partner  @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  slug        String   @unique
  title       String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  bookmarked_opportunities Bookmark[] @relation("BookmarkedOpportunities")
}

//
//#endregion
//

//
//#region üìù Forum
//

model Question {
  id                 String   @id @default(cuid())
  accepted_answer    Answer?  @relation("AcceptedAnswer", fields: [accepted_answer_id], references: [id], onDelete: SetNull)
  accepted_answer_id String?  @unique
  answers            Answer[] @relation("ParentQuestion")
  category           Category @relation("CategorizedQuestions", fields: [category_id], references: [id], onDelete: Cascade)
  category_id        String
  owner              Student  @relation("AskedQuestions", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id           String
  title              String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Answer {
  id        String   @id @default(cuid())
  content   String
  owner     Student  @relation("GivenAnswers", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id  String
  parent    Question @relation("ParentQuestion", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  accepted_for Question? @relation("AcceptedAnswer")

  forum_notifications ForumNotification[]
}

//
//#endregion
//

//
//#region üì¨ Inbox
//

model InboxThread {
  id             String   @id @default(cuid())
  is_archived    Boolean  @default(false)
  last_seen_date DateTime @default(now())
  owner          Student  @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id       String
  thread         Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id      String

  @@unique([owner_id, thread_id])
}

model Thread {
  id           String    @id @default(cuid())
  messages     Message[]
  participants Profile[] @relation("ParticipantsInThread")
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  inbox_threads    InboxThread[]
  exchange_threads ExchangeThread[]
}

model Message {
  author    Profile @relation("WrittenMessages", fields: [author_id], references: [id], onDelete: Cascade)
  author_id String
  content   String
  delivered Boolean @default(true)
  id        String  @id @default(cuid())
  thread    Thread  @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String

  inbox_notifications    InboxMessageNotification[]
  exchange_notifications ExchangeMessageNotification[]

  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@unique(name: "unique_date_in_thread", fields: [thread_id, created_at])
}

//
//#endregion
//

//
//#region ‚òùÔ∏è Notification
//

model Notification {
  id       String           @id @default(cuid())
  owner    Profile          @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id String
  read_at  DateTime?
  type     NotificationType

  exchange_message ExchangeMessageNotification?
  forum_message    ForumNotification?
  inbox_message    InboxMessageNotification?
  profile_added    ProfileAddedNotification?

  //

  created_at DateTime @default(now())
}

enum NotificationType {
  EXCHANGE_COMPLETED
  EXCHANGE_NEW_MESSAGE
  EXCHANGE_NEW_PARTICIPANT
  FORUM_NEW_AWNSER
  INBOX_NEW_MESSAGE
  PROFILE_ADDED
}

model ExchangeMessageNotification {
  exchange        Exchange?    @relation(fields: [exchange_id], references: [id], onDelete: Cascade)
  exchange_id     String?
  message         Message?     @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id      String?
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  notification_id String       @unique

  @@unique(name: "unique_message_notification", fields: [message_id, notification_id])
}

model ForumNotification {
  answer          Answer?      @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  answer_id       String?
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  notification_id String       @unique

  @@unique(name: "unique_answer_notification", fields: [answer_id, notification_id])
}

model InboxMessageNotification {
  message         Message?     @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id      String?
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  notification_id String       @unique

  @@unique(name: "unique_message_notification", fields: [message_id, notification_id])
}

model ProfileAddedNotification {
  notification    Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  notification_id String       @unique
  profile         Profile?     @relation("AddedNotifications", fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id      String?

  @@unique(name: "unique_profile_added_notification", fields: [profile_id, notification_id])
}

//
//#endregion
//

//
//#region üóùÔ∏è Auth
//

model PasswordlessToken {
  id         String    @id @default(uuid())
  body       String    @unique
  email      String
  login_date DateTime?
  is_active  Boolean   @default(true)
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //

  profile Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  payload       SignupPayload? @relation(fields: [payload_email], references: [email], onDelete: Cascade)
  payload_email String?

  @@unique([identifier, token])
}

//
//#endregion
//
