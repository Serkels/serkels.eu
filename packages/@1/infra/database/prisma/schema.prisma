//

//
//
//

//
//
//

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

//
//
//

//
//
//

model SignupPayload {
  role    ProfileRole
  name    String
  email   String              @unique
  tokens  VerificationToken[]
  context Json
}

model Profile {
  id        String      @id @default(cuid())
  bio       String?
  bookmarks Bookmark[]
  contacts  Profile[]   @relation("Contacts")
  following Profile[]   @relation("ProfileFollows")
  image     String
  name      String
  role      ProfileRole
  user      User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String      @unique @map("userId")
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  partner                Partner?
  studient               Studient?
  written_messages       Message[] @relation("WrittenMessages")
  followed_by            Profile[] @relation("ProfileFollows")
  participants_in_thread Thread[]  @relation("ParticipantsInThread")
  in_contact_with        Profile[] @relation("Contacts")
}

model Studient {
  id             String     @id @default(cuid())
  citizenship    String?
  city           String?
  field_of_study String?
  interest       Category[] @relation("CategorizedStudientInterest")
  profile        Profile    @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id     String     @unique
  university     String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  asked_questions      Question[]       @relation("AskedQuestions")
  exchange_threads     ExchangeThread[]
  inbox_threads        InboxThread[]
  participants_in_deal Deal[]
  proposed_exchanges   Exchange[]       @relation("ProposedExchanges")
}

model Partner {
  id            String        @id @default(cuid())
  city          String?
  link          String
  opportunities Opportunity[]
  profile       Profile       @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id    String        @unique
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//

enum ProfileRole {
  ADMIN
  PARTNER
  STUDIENT
}

//
//
//

//
//
//

model Bookmark {
  id             String       @id @default(cuid())
  exchange       Exchange?    @relation("BookmarkedExchanges", fields: [exchange_id], references: [id])
  exchange_id    String?
  opportunity    Opportunity? @relation("BookmarkedOpportunities", fields: [opportunity_id], references: [id])
  opportunity_id String?
  owner          Profile      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id       String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  @@unique(fields: [owner_id, exchange_id], name: "bookmarked_exchange")
  @@unique(fields: [owner_id, opportunity_id], name: "bookmarked_opportunity")
}

//
//
//

//
//
//

model Category {
  id      String           @id @default(cuid())
  context CategoryContext? @default(EXCHANGE)
  rank    Int?
  name    String
  slug    String
  //

  categorized_exchanges         Exchange[]    @relation("CategorizedExchanges")
  categorized_opportunities     Opportunity[] @relation("CategorizedOpportunities")
  categorized_questions         Question[]    @relation("CategorizedQuestions")
  categorized_return_exchanges  Exchange[]    @relation("CategorizedReturnExchanges")
  categorized_studient_interest Studient[]    @relation("CategorizedStudientInterest")
  //

  @@unique(fields: [slug, context], name: "slug_in_context")
}

enum CategoryContext {
  EXCHANGE
  OPPORTUNITY
  FORUM
}

//
//
//

//
//
//

model Exchange {
  id          String       @id @default(cuid())
  category    Category     @relation("CategorizedExchanges", fields: [category_id], references: [id])
  category_id String
  deals       Deal[]
  description String
  expiry_date DateTime     @default(now())
  is_active   Boolean
  is_online   Boolean
  location    String?
  owner       Studient     @relation("ProposedExchanges", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  places      Int
  return      Category?    @relation("CategorizedReturnExchanges", fields: [return_id], references: [id])
  return_id   String?
  title       String
  type        ExchangeType
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  bookmarked_exchanges Bookmark[] @relation("BookmarkedExchanges")
}

enum ExchangeType {
  PROPOSAL
  RESEARCH
}

model Deal {
  id             String               @id @default(cuid())
  status         ExchangeThreadStatus @default(IDLE)
  parent         Exchange             @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id      String
  participant    Studient             @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  exchange_threads ExchangeThread[]
  //

  @@unique(name: "participant_per_exchange", fields: [parent_id, participant_id])
}

model ExchangeThread {
  id             String   @id @default(cuid())
  last_seen_date DateTime @default(now())
  owner          Studient @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id       String
  deal           Deal     @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  deal_id        String
  thread         Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id      String

  @@unique([owner_id, deal_id])
}

enum ExchangeThreadStatus {
  IDLE
  DENIED
  APPROVED_BY_THE_ORGANIZER
  APPROVED
}

//
//
//

//
//
//

model Opportunity {
  id          String   @id @default(cuid())
  category    Category @relation("CategorizedOpportunities", fields: [category_id], references: [id])
  category_id String
  cover       String
  description String
  expiry_date DateTime
  link        String
  location    String?
  owner       Partner  @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  slug        String   @unique
  title       String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  bookmarked_opportunities Bookmark[] @relation("BookmarkedOpportunities")
}

//
//
//

//
//
//

model Question {
  id          String   @id @default(cuid())
  category    Category @relation("CategorizedQuestions", fields: [category_id], references: [id])
  category_id String
  owner       Studient @relation("AskedQuestions", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  title       String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//
//
//

//
//
//

model InboxThread {
  id             String   @id @default(cuid())
  is_archived    Boolean  @default(false)
  last_seen_date DateTime @default(now())
  owner          Studient @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id       String
  thread         Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id      String

  @@unique([owner_id, thread_id])
}

model Thread {
  id           String    @id @default(cuid())
  messages     Message[]
  participants Profile[] @relation("ParticipantsInThread")
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  //

  inbox_threads    InboxThread[]
  exchange_threads ExchangeThread[]
}

model Message {
  id        String  @id @default(cuid())
  author    Profile @relation("WrittenMessages", fields: [author_id], references: [id], onDelete: Cascade)
  author_id String
  content   String
  thread    Thread  @relation(fields: [thread_id], references: [id])
  thread_id String
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@unique(name: "unique_date_in_thread", fields: [thread_id, created_at])
}

//
//
//

//
//
//

model PasswordlessToken {
  id         String    @id @default(uuid())
  body       String    @unique
  email      String
  login_date DateTime?
  is_active  Boolean   @default(true)
  //

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //

  profile Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  payload       SignupPayload? @relation(fields: [payload_email], references: [email], onDelete: Cascade)
  payload_email String?

  @@unique([identifier, token])
}
