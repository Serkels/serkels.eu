//

//
//
//

//
//
//

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

//
//
//

//
//
//

model SignupPayload {
  role   ProfileRole
  name   String
  email  String              @unique
  tokens VerificationToken[]
}

model Profile {
  id               String      @id @default(cuid())
  bio              String?
  bookmarks        Bookmark[]
  image            String
  name             String
  role             ProfileRole
  user             User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          String      @unique @map("userId")
  //
  created_at       DateTime    @default(now())
  updated_at       DateTime    @default(now())
  //
  partner          Partner?
  studient         Studient?
  asked_questions  Question[]  @relation("AskedQuestions")
  written_messages Message[]   @relation("WrittenMessages")
}

model Studient {
  id             String     @id @default(cuid())
  citizenship    String?
  city           String?
  exchange       Exchange[] @relation("StudientEchanges")
  field_of_study String?
  interest       Category?  @relation("CategorizedStudientInterest", fields: [interest_id], references: [id])
  interest_id    String?
  profile        Profile    @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id     String     @unique
  university     String
  //
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now())
  //

  participants_in_exchanges Exchange[] @relation("ParticipantsInExchanges")
}

model Partner {
  id            String        @id @default(cuid())
  city          String?
  link          String
  opportunities Opportunity[]
  profile       Profile       @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id    String        @unique
  //
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
}

//

enum ProfileRole {
  ADMIN
  PARTNER
  STUDIENT
}

//
//
//

//
//
//

model Bookmark {
  id            String        @id @default(cuid())
  exchanges     Exchange[]    @relation("BookmarkedExchanges")
  name          String
  opportunities Opportunity[] @relation("BookmarkedOpportunities")
  owner         Profile       @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id      String        @unique
  slug          String        @unique
  //
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
}

//
//
//

//
//
//

model Category {
  id                            String            @id @default(cuid())
  contexts                      CategoryContext[]
  name                          String
  slug                          String            @unique
  //
  categorized_exchanges         Exchange[]        @relation("CategorizedExchanges")
  categorized_return_exchanges  Exchange[]        @relation("CategorizedReturnExchanges")
  categorized_opportunities     Opportunity[]     @relation("CategorizedOpportunities")
  categorized_questions         Question[]        @relation("CategorizedQuestions")
  categorized_studient_interest Studient[]        @relation("CategorizedStudientInterest")
}

enum CategoryContext {
  EXCHANGE
  OPPORTUNITY
  FORUM
}

//
//
//

//
//
//

model Exchange {
  id                   String       @id @default(cuid())
  active               Boolean
  category             Category     @relation("CategorizedExchanges", fields: [category_id], references: [id])
  category_id          String
  description          String
  return               Category?    @relation("CategorizedReturnExchanges", fields: [return_id], references: [id])
  return_id            String?
  is_online            Boolean
  location             String?
  owner                Studient     @relation("StudientEchanges", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id             String
  participants         Studient[]   @relation("ParticipantsInExchanges")
  places               Int
  title                String
  type                 ExchangeType
  when                 DateTime     @default(now())
  //
  created_at           DateTime     @default(now())
  updated_at           DateTime     @default(now())
  //
  bookmarked_exchanges Bookmark[]   @relation("BookmarkedExchanges")
}

enum ExchangeType {
  PROPOSAL
  RESEARCH
}

//
//
//

//
//
//

model Opportunity {
  id                       String     @id @default(cuid())
  category                 Category   @relation("CategorizedOpportunities", fields: [category_id], references: [id])
  category_id              String
  cover                    String
  description              String
  link                     String
  location                 String?
  owner                    Partner    @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id                 String
  slug                     String     @unique
  title                    String
  when                     DateTime
  //
  created_at               DateTime   @default(now())
  updated_at               DateTime   @default(now())
  //
  bookmarked_opportunities Bookmark[] @relation("BookmarkedOpportunities")
}

//
//
//

//
//
//

model Question {
  id          String   @id @default(cuid())
  category    Category @relation("CategorizedQuestions", fields: [category_id], references: [id])
  category_id String
  owner       Profile  @relation("AskedQuestions", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id    String
  title       String
  //
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

//
//
//

//
//
//

model Message {
  id         String   @id @default(cuid())
  author     Profile  @relation("WrittenMessages", fields: [author_id], references: [id], onDelete: Cascade)
  author_id  String
  content    String
  //
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//
//
//

//
//
//

model PasswordlessToken {
  id         String    @id @default(uuid())
  body       String    @unique
  email      String
  login_date DateTime?
  is_active  Boolean   @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //

  profile Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  payload       SignupPayload? @relation(fields: [payload_email], references: [email], onDelete: Cascade)
  payload_email String?

  @@unique([identifier, token])
}
