/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from "msw";
import { faker } from "@faker-js/faker";
import { setupServer } from "msw/node";

faker.setDefaultRefDate(() => new Date(1));
faker.seed(1);

const baseURL = "http://__/api";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/opportunities`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetOpportunities200Response())],
      [ctx.status(400), ctx.json(getGetOpportunities400Response())],
      [ctx.status(401), ctx.json(getGetOpportunities401Response())],
      [ctx.status(403), ctx.json(getGetOpportunities403Response())],
      [ctx.status(404), ctx.json(getGetOpportunities404Response())],
      [ctx.status(500), ctx.json(getGetOpportunities500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/opportunities`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostOpportunities200Response())],
      [ctx.status(400), ctx.json(getPostOpportunities400Response())],
      [ctx.status(401), ctx.json(getPostOpportunities401Response())],
      [ctx.status(403), ctx.json(getPostOpportunities403Response())],
      [ctx.status(404), ctx.json(getPostOpportunities404Response())],
      [ctx.status(500), ctx.json(getPostOpportunities500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/opportunities/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetOpportunitiesId200Response())],
      [ctx.status(400), ctx.json(getGetOpportunitiesId400Response())],
      [ctx.status(401), ctx.json(getGetOpportunitiesId401Response())],
      [ctx.status(403), ctx.json(getGetOpportunitiesId403Response())],
      [ctx.status(404), ctx.json(getGetOpportunitiesId404Response())],
      [ctx.status(500), ctx.json(getGetOpportunitiesId500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/opportunities/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPutOpportunitiesId200Response())],
      [ctx.status(400), ctx.json(getPutOpportunitiesId400Response())],
      [ctx.status(401), ctx.json(getPutOpportunitiesId401Response())],
      [ctx.status(403), ctx.json(getPutOpportunitiesId403Response())],
      [ctx.status(404), ctx.json(getPutOpportunitiesId404Response())],
      [ctx.status(500), ctx.json(getPutOpportunitiesId500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/opportunities/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getDeleteOpportunitiesId200Response())],
      [ctx.status(400), ctx.json(getDeleteOpportunitiesId400Response())],
      [ctx.status(401), ctx.json(getDeleteOpportunitiesId401Response())],
      [ctx.status(403), ctx.json(getDeleteOpportunitiesId403Response())],
      [ctx.status(404), ctx.json(getDeleteOpportunitiesId404Response())],
      [ctx.status(500), ctx.json(getDeleteOpportunitiesId500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/opportunities/:id/localizations`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getPostOpportunitiesIdLocalizations200Response()),
      ],
      [
        ctx.status(400),
        ctx.json(getPostOpportunitiesIdLocalizations400Response()),
      ],
      [
        ctx.status(401),
        ctx.json(getPostOpportunitiesIdLocalizations401Response()),
      ],
      [
        ctx.status(403),
        ctx.json(getPostOpportunitiesIdLocalizations403Response()),
      ],
      [
        ctx.status(404),
        ctx.json(getPostOpportunitiesIdLocalizations404Response()),
      ],
      [
        ctx.status(500),
        ctx.json(getPostOpportunitiesIdLocalizations500Response()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(
    `${baseURL}/comments/:relation/comment/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getPutCommentsRelationCommentCommentId200Response()),
        ],
        [
          ctx.status(400),
          ctx.json(getPutCommentsRelationCommentCommentId400Response()),
        ],
        [
          ctx.status(401),
          ctx.json(getPutCommentsRelationCommentCommentId401Response()),
        ],
        [
          ctx.status(403),
          ctx.json(getPutCommentsRelationCommentCommentId403Response()),
        ],
        [
          ctx.status(404),
          ctx.json(getPutCommentsRelationCommentCommentId404Response()),
        ],
        [
          ctx.status(500),
          ctx.json(getPutCommentsRelationCommentCommentId500Response()),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.delete(
    `${baseURL}/comments/:relation/comment/:commentId`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getDeleteCommentsRelationCommentCommentId200Response()),
        ],
        [
          ctx.status(400),
          ctx.json(getDeleteCommentsRelationCommentCommentId400Response()),
        ],
        [
          ctx.status(401),
          ctx.json(getDeleteCommentsRelationCommentCommentId401Response()),
        ],
        [
          ctx.status(403),
          ctx.json(getDeleteCommentsRelationCommentCommentId403Response()),
        ],
        [
          ctx.status(404),
          ctx.json(getDeleteCommentsRelationCommentCommentId404Response()),
        ],
        [
          ctx.status(500),
          ctx.json(getDeleteCommentsRelationCommentCommentId500Response()),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.post(
    `${baseURL}/comments/:relation/comment/:commentId/report-abuse`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse200Response()
          ),
        ],
        [
          ctx.status(400),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse400Response()
          ),
        ],
        [
          ctx.status(401),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse401Response()
          ),
        ],
        [
          ctx.status(403),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse403Response()
          ),
        ],
        [
          ctx.status(404),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse404Response()
          ),
        ],
        [
          ctx.status(500),
          ctx.json(
            getPostCommentsRelationCommentCommentIdReportAbuse500Response()
          ),
        ],
      ];

      return res(...resultArray[next() % resultArray.length]);
    }
  ),
  rest.get(`${baseURL}/i18n/locales`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetI18NLocales200Response())],
      [ctx.status(400), ctx.json(getGetI18NLocales400Response())],
      [ctx.status(401), ctx.json(getGetI18NLocales401Response())],
      [ctx.status(403), ctx.json(getGetI18NLocales403Response())],
      [ctx.status(404), ctx.json(getGetI18NLocales404Response())],
      [ctx.status(500), ctx.json(getGetI18NLocales500Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/upload`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostUpload200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/upload?id=:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostUploadIdId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/upload/files`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUploadFiles200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/upload/files/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUploadFilesId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/upload/files/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getDeleteUploadFilesId200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/connect/:provider`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(301), ctx.json(null)],
      [ctx.status(NaN), ctx.json(getGetConnectProviderdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/local`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthLocal200Response())],
      [ctx.status(NaN), ctx.json(getPostAuthLocaldefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/local/register`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthLocalRegister200Response())],
      [ctx.status(NaN), ctx.json(getPostAuthLocalRegisterdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/:provider/callback`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetAuthProviderCallback200Response())],
      [ctx.status(NaN), ctx.json(getGetAuthProviderCallbackdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/forgot-password`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthForgotPassword200Response())],
      [ctx.status(NaN), ctx.json(getPostAuthForgotPassworddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/reset-password`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthResetPassword200Response())],
      [ctx.status(NaN), ctx.json(getPostAuthResetPassworddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/change-password`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostAuthChangePassword200Response())],
      [ctx.status(NaN), ctx.json(getPostAuthChangePassworddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/email-confirmation`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(301), ctx.json(null)],
      [ctx.status(NaN), ctx.json(getGetAuthEmailConfirmationdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/auth/send-email-confirmation`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getPostAuthSendEmailConfirmation200Response()),
      ],
      [
        ctx.status(NaN),
        ctx.json(getPostAuthSendEmailConfirmationdefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users-permissions/permissions`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getGetUsersPermissionsPermissions200Response()),
      ],
      [
        ctx.status(NaN),
        ctx.json(getGetUsersPermissionsPermissionsdefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users-permissions/roles`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersPermissionsRoles200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersPermissionsRolesdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/users-permissions/roles`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostUsersPermissionsRoles200Response())],
      [
        ctx.status(NaN),
        ctx.json(getPostUsersPermissionsRolesdefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users-permissions/roles/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersPermissionsRolesId200Response())],
      [
        ctx.status(NaN),
        ctx.json(getGetUsersPermissionsRolesIddefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/users-permissions/roles/:role`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPutUsersPermissionsRolesRole200Response())],
      [
        ctx.status(NaN),
        ctx.json(getPutUsersPermissionsRolesRoledefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/users-permissions/roles/:role`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getDeleteUsersPermissionsRolesRole200Response()),
      ],
      [
        ctx.status(NaN),
        ctx.json(getDeleteUsersPermissionsRolesRoledefaultResponse()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsers200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getPostUsers201Response())],
      [ctx.status(NaN), ctx.json(getPostUsersdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersId200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersIddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/users/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPutUsersId200Response())],
      [ctx.status(NaN), ctx.json(getPutUsersIddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/users/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getDeleteUsersId200Response())],
      [ctx.status(NaN), ctx.json(getDeleteUsersIddefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersMe200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersMedefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/users/count`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersCount200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersCountdefaultResponse())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

export function getGetOpportunities200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        title: faker.lorem.slug(1),
        expireAt: faker.date.past(),
        description: faker.lorem.slug(1),
        cover: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              name: faker.person.fullName(),
              alternativeText: faker.lorem.slug(1),
              caption: faker.lorem.slug(1),
              width: faker.number.int({ min: undefined, max: undefined }),
              height: faker.number.int({ min: undefined, max: undefined }),
              formats: null,
              hash: faker.lorem.slug(1),
              ext: faker.lorem.slug(1),
              mime: faker.lorem.slug(1),
              size: faker.number.int({ min: undefined, max: undefined }),
              url: faker.internet.url(),
              previewUrl: faker.internet.url(),
              provider: faker.lorem.slug(1),
              provider_metadata: null,
              related: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                })),
              },
              folder: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    pathId: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    parent: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    children: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    files: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          name: faker.person.fullName(),
                          alternativeText: faker.lorem.slug(1),
                          caption: faker.lorem.slug(1),
                          width: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          height: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          formats: null,
                          hash: faker.lorem.slug(1),
                          ext: faker.lorem.slug(1),
                          mime: faker.lorem.slug(1),
                          size: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          url: faker.internet.url(),
                          previewUrl: faker.internet.url(),
                          provider: faker.lorem.slug(1),
                          provider_metadata: null,
                          related: {
                            data: [
                              ...new Array(
                                faker.number.int({
                                  min: 1,
                                  max: MAX_ARRAY_LENGTH,
                                })
                              ).keys(),
                            ].map((_) => ({
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            })),
                          },
                          folder: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          folderPath: faker.lorem.slug(1),
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    path: faker.lorem.slug(1),
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              folderPath: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        slug: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        publishedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        localizations: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => null),
        },
        locale: faker.lorem.slug(1),
      },
    })),
    meta: {
      pagination: {
        page: faker.number.int({ min: undefined, max: undefined }),
        pageSize: faker.number.int({ min: 25, max: undefined }),
        pageCount: faker.number.int({ min: undefined, max: 1 }),
        total: faker.number.int({ min: undefined, max: undefined }),
      },
    },
  };
}

export function getGetOpportunities400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunities401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunities403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunities404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunities500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunities200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        title: faker.lorem.slug(1),
        expireAt: faker.date.past(),
        description: faker.lorem.slug(1),
        cover: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              name: faker.person.fullName(),
              alternativeText: faker.lorem.slug(1),
              caption: faker.lorem.slug(1),
              width: faker.number.int({ min: undefined, max: undefined }),
              height: faker.number.int({ min: undefined, max: undefined }),
              formats: null,
              hash: faker.lorem.slug(1),
              ext: faker.lorem.slug(1),
              mime: faker.lorem.slug(1),
              size: faker.number.int({ min: undefined, max: undefined }),
              url: faker.internet.url(),
              previewUrl: faker.internet.url(),
              provider: faker.lorem.slug(1),
              provider_metadata: null,
              related: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                })),
              },
              folder: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    pathId: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    parent: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    children: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    files: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          name: faker.person.fullName(),
                          alternativeText: faker.lorem.slug(1),
                          caption: faker.lorem.slug(1),
                          width: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          height: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          formats: null,
                          hash: faker.lorem.slug(1),
                          ext: faker.lorem.slug(1),
                          mime: faker.lorem.slug(1),
                          size: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          url: faker.internet.url(),
                          previewUrl: faker.internet.url(),
                          provider: faker.lorem.slug(1),
                          provider_metadata: null,
                          related: {
                            data: [
                              ...new Array(
                                faker.number.int({
                                  min: 1,
                                  max: MAX_ARRAY_LENGTH,
                                })
                              ).keys(),
                            ].map((_) => ({
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            })),
                          },
                          folder: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          folderPath: faker.lorem.slug(1),
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    path: faker.lorem.slug(1),
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              folderPath: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        slug: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        publishedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        localizations: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => null),
        },
        locale: faker.lorem.slug(1),
      },
    },
    meta: {},
  };
}

export function getPostOpportunities400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunities401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunities403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunities404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunities500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunitiesId200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        title: faker.lorem.slug(1),
        expireAt: faker.date.past(),
        description: faker.lorem.slug(1),
        cover: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              name: faker.person.fullName(),
              alternativeText: faker.lorem.slug(1),
              caption: faker.lorem.slug(1),
              width: faker.number.int({ min: undefined, max: undefined }),
              height: faker.number.int({ min: undefined, max: undefined }),
              formats: null,
              hash: faker.lorem.slug(1),
              ext: faker.lorem.slug(1),
              mime: faker.lorem.slug(1),
              size: faker.number.int({ min: undefined, max: undefined }),
              url: faker.internet.url(),
              previewUrl: faker.internet.url(),
              provider: faker.lorem.slug(1),
              provider_metadata: null,
              related: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                })),
              },
              folder: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    pathId: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    parent: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    children: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    files: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          name: faker.person.fullName(),
                          alternativeText: faker.lorem.slug(1),
                          caption: faker.lorem.slug(1),
                          width: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          height: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          formats: null,
                          hash: faker.lorem.slug(1),
                          ext: faker.lorem.slug(1),
                          mime: faker.lorem.slug(1),
                          size: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          url: faker.internet.url(),
                          previewUrl: faker.internet.url(),
                          provider: faker.lorem.slug(1),
                          provider_metadata: null,
                          related: {
                            data: [
                              ...new Array(
                                faker.number.int({
                                  min: 1,
                                  max: MAX_ARRAY_LENGTH,
                                })
                              ).keys(),
                            ].map((_) => ({
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            })),
                          },
                          folder: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          folderPath: faker.lorem.slug(1),
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    path: faker.lorem.slug(1),
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              folderPath: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        slug: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        publishedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        localizations: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => null),
        },
        locale: faker.lorem.slug(1),
      },
    },
    meta: {},
  };
}

export function getGetOpportunitiesId400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunitiesId401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunitiesId403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunitiesId404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetOpportunitiesId500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutOpportunitiesId200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        title: faker.lorem.slug(1),
        expireAt: faker.date.past(),
        description: faker.lorem.slug(1),
        cover: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              name: faker.person.fullName(),
              alternativeText: faker.lorem.slug(1),
              caption: faker.lorem.slug(1),
              width: faker.number.int({ min: undefined, max: undefined }),
              height: faker.number.int({ min: undefined, max: undefined }),
              formats: null,
              hash: faker.lorem.slug(1),
              ext: faker.lorem.slug(1),
              mime: faker.lorem.slug(1),
              size: faker.number.int({ min: undefined, max: undefined }),
              url: faker.internet.url(),
              previewUrl: faker.internet.url(),
              provider: faker.lorem.slug(1),
              provider_metadata: null,
              related: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                })),
              },
              folder: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    pathId: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    parent: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    children: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    files: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          name: faker.person.fullName(),
                          alternativeText: faker.lorem.slug(1),
                          caption: faker.lorem.slug(1),
                          width: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          height: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          formats: null,
                          hash: faker.lorem.slug(1),
                          ext: faker.lorem.slug(1),
                          mime: faker.lorem.slug(1),
                          size: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          url: faker.internet.url(),
                          previewUrl: faker.internet.url(),
                          provider: faker.lorem.slug(1),
                          provider_metadata: null,
                          related: {
                            data: [
                              ...new Array(
                                faker.number.int({
                                  min: 1,
                                  max: MAX_ARRAY_LENGTH,
                                })
                              ).keys(),
                            ].map((_) => ({
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            })),
                          },
                          folder: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          folderPath: faker.lorem.slug(1),
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    path: faker.lorem.slug(1),
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              folderPath: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        slug: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        publishedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        localizations: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => null),
        },
        locale: faker.lorem.slug(1),
      },
    },
    meta: {},
  };
}

export function getPutOpportunitiesId400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutOpportunitiesId401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutOpportunitiesId403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutOpportunitiesId404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutOpportunitiesId500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteOpportunitiesId200Response() {
  return faker.number.int({ min: undefined, max: undefined });
}

export function getDeleteOpportunitiesId400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteOpportunitiesId401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteOpportunitiesId403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteOpportunitiesId404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteOpportunitiesId500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunitiesIdLocalizations200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        title: faker.lorem.slug(1),
        expireAt: faker.date.past(),
        description: faker.lorem.slug(1),
        cover: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              name: faker.person.fullName(),
              alternativeText: faker.lorem.slug(1),
              caption: faker.lorem.slug(1),
              width: faker.number.int({ min: undefined, max: undefined }),
              height: faker.number.int({ min: undefined, max: undefined }),
              formats: null,
              hash: faker.lorem.slug(1),
              ext: faker.lorem.slug(1),
              mime: faker.lorem.slug(1),
              size: faker.number.int({ min: undefined, max: undefined }),
              url: faker.internet.url(),
              previewUrl: faker.internet.url(),
              provider: faker.lorem.slug(1),
              provider_metadata: null,
              related: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                })),
              },
              folder: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    pathId: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    parent: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    children: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    files: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          name: faker.person.fullName(),
                          alternativeText: faker.lorem.slug(1),
                          caption: faker.lorem.slug(1),
                          width: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          height: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          formats: null,
                          hash: faker.lorem.slug(1),
                          ext: faker.lorem.slug(1),
                          mime: faker.lorem.slug(1),
                          size: faker.number.int({
                            min: undefined,
                            max: undefined,
                          }),
                          url: faker.internet.url(),
                          previewUrl: faker.internet.url(),
                          provider: faker.lorem.slug(1),
                          provider_metadata: null,
                          related: {
                            data: [
                              ...new Array(
                                faker.number.int({
                                  min: 1,
                                  max: MAX_ARRAY_LENGTH,
                                })
                              ).keys(),
                            ].map((_) => ({
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            })),
                          },
                          folder: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          folderPath: faker.lorem.slug(1),
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    path: faker.lorem.slug(1),
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              folderPath: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        slug: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        publishedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        localizations: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => null),
        },
        locale: faker.lorem.slug(1),
      },
    },
    meta: {},
  };
}

export function getPostOpportunitiesIdLocalizations400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunitiesIdLocalizations401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunitiesIdLocalizations403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunitiesIdLocalizations404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostOpportunitiesIdLocalizations500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutCommentsRelationCommentCommentId200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        content: faker.lorem.slug(1),
        blocked: faker.datatype.boolean(),
        blockedThread: faker.datatype.boolean(),
        blockReason: faker.lorem.slug(1),
        authorUser: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              username: faker.person.fullName(),
              email: faker.internet.email(),
              provider: faker.lorem.slug(1),
              resetPasswordToken: faker.lorem.slug(1),
              confirmationToken: faker.lorem.slug(1),
              confirmed: faker.datatype.boolean(),
              blocked: faker.datatype.boolean(),
              role: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    description: faker.lorem.slug(1),
                    type: faker.lorem.slug(1),
                    permissions: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          action: faker.lorem.slug(1),
                          role: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    users: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        authorId: faker.lorem.slug(1),
        authorName: faker.person.fullName(),
        authorEmail: faker.internet.email(),
        authorAvatar: faker.lorem.slug(1),
        isAdminComment: faker.datatype.boolean(),
        removed: faker.datatype.boolean(),
        approvalStatus: faker.lorem.slug(1),
        related: faker.lorem.slug(1),
        reports: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              content: faker.lorem.slug(1),
              reason: faker.helpers.arrayElement([
                "BAD_LANGUAGE",
                "DISCRIMINATION",
                "OTHER",
              ]),
              resolved: faker.datatype.boolean(),
              related: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    content: faker.lorem.slug(1),
                    blocked: faker.datatype.boolean(),
                    blockedThread: faker.datatype.boolean(),
                    blockReason: faker.lorem.slug(1),
                    authorUser: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    authorId: faker.lorem.slug(1),
                    authorName: faker.person.fullName(),
                    authorEmail: faker.internet.email(),
                    authorAvatar: faker.lorem.slug(1),
                    isAdminComment: faker.datatype.boolean(),
                    removed: faker.datatype.boolean(),
                    approvalStatus: faker.lorem.slug(1),
                    related: faker.lorem.slug(1),
                    reports: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    threadOf: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          })),
        },
        threadOf: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
      },
    },
    meta: {},
  };
}

export function getPutCommentsRelationCommentCommentId400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutCommentsRelationCommentCommentId401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutCommentsRelationCommentCommentId403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutCommentsRelationCommentCommentId404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutCommentsRelationCommentCommentId500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteCommentsRelationCommentCommentId200Response() {
  return faker.number.int({ min: undefined, max: undefined });
}

export function getDeleteCommentsRelationCommentCommentId400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteCommentsRelationCommentCommentId401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteCommentsRelationCommentCommentId403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteCommentsRelationCommentCommentId404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteCommentsRelationCommentCommentId500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        content: faker.lorem.slug(1),
        blocked: faker.datatype.boolean(),
        blockedThread: faker.datatype.boolean(),
        blockReason: faker.lorem.slug(1),
        authorUser: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              username: faker.person.fullName(),
              email: faker.internet.email(),
              provider: faker.lorem.slug(1),
              resetPasswordToken: faker.lorem.slug(1),
              confirmationToken: faker.lorem.slug(1),
              confirmed: faker.datatype.boolean(),
              blocked: faker.datatype.boolean(),
              role: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    description: faker.lorem.slug(1),
                    type: faker.lorem.slug(1),
                    permissions: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          action: faker.lorem.slug(1),
                          role: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {
                                firstname: faker.person.fullName(),
                                lastname: faker.person.fullName(),
                                username: faker.person.fullName(),
                                email: faker.internet.email(),
                                resetPasswordToken: faker.lorem.slug(1),
                                registrationToken: faker.lorem.slug(1),
                                isActive: faker.datatype.boolean(),
                                roles: {
                                  data: [
                                    ...new Array(
                                      faker.number.int({
                                        min: 1,
                                        max: MAX_ARRAY_LENGTH,
                                      })
                                    ).keys(),
                                  ].map((_) => ({
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {
                                      name: faker.person.fullName(),
                                      code: faker.lorem.slug(1),
                                      description: faker.lorem.slug(1),
                                      users: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        })),
                                      },
                                      permissions: {
                                        data: [
                                          ...new Array(
                                            faker.number.int({
                                              min: 1,
                                              max: MAX_ARRAY_LENGTH,
                                            })
                                          ).keys(),
                                        ].map((_) => ({
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {
                                            action: faker.lorem.slug(1),
                                            subject: faker.lorem.slug(1),
                                            properties: null,
                                            conditions: null,
                                            role: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            createdAt: faker.date.past(),
                                            updatedAt: faker.date.past(),
                                            createdBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                            updatedBy: {
                                              data: {
                                                id: faker.number.int({
                                                  min: undefined,
                                                  max: undefined,
                                                }),
                                                attributes: {},
                                              },
                                            },
                                          },
                                        })),
                                      },
                                      createdAt: faker.date.past(),
                                      updatedAt: faker.date.past(),
                                      createdBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                      updatedBy: {
                                        data: {
                                          id: faker.number.int({
                                            min: undefined,
                                            max: undefined,
                                          }),
                                          attributes: {},
                                        },
                                      },
                                    },
                                  })),
                                },
                                blocked: faker.datatype.boolean(),
                                preferedLanguage: faker.lorem.slug(1),
                                createdAt: faker.date.past(),
                                updatedAt: faker.date.past(),
                                createdBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                                updatedBy: {
                                  data: {
                                    id: faker.number.int({
                                      min: undefined,
                                      max: undefined,
                                    }),
                                    attributes: {},
                                  },
                                },
                              },
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    users: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        authorId: faker.lorem.slug(1),
        authorName: faker.person.fullName(),
        authorEmail: faker.internet.email(),
        authorAvatar: faker.lorem.slug(1),
        isAdminComment: faker.datatype.boolean(),
        removed: faker.datatype.boolean(),
        approvalStatus: faker.lorem.slug(1),
        related: faker.lorem.slug(1),
        reports: {
          data: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              content: faker.lorem.slug(1),
              reason: faker.helpers.arrayElement([
                "BAD_LANGUAGE",
                "DISCRIMINATION",
                "OTHER",
              ]),
              resolved: faker.datatype.boolean(),
              related: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    content: faker.lorem.slug(1),
                    blocked: faker.datatype.boolean(),
                    blockedThread: faker.datatype.boolean(),
                    blockReason: faker.lorem.slug(1),
                    authorUser: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    authorId: faker.lorem.slug(1),
                    authorName: faker.person.fullName(),
                    authorEmail: faker.internet.email(),
                    authorAvatar: faker.lorem.slug(1),
                    isAdminComment: faker.datatype.boolean(),
                    removed: faker.datatype.boolean(),
                    approvalStatus: faker.lorem.slug(1),
                    related: faker.lorem.slug(1),
                    reports: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    threadOf: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                },
              },
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          })),
        },
        threadOf: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
      },
    },
    meta: {},
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostCommentsRelationCommentCommentIdReportAbuse500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetI18NLocales200Response() {
  return {
    data: {
      id: faker.number.int({ min: undefined, max: undefined }),
      attributes: {
        name: faker.person.fullName(),
        code: faker.lorem.slug(1),
        createdAt: faker.date.past(),
        updatedAt: faker.date.past(),
        createdBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {
              firstname: faker.person.fullName(),
              lastname: faker.person.fullName(),
              username: faker.person.fullName(),
              email: faker.internet.email(),
              resetPasswordToken: faker.lorem.slug(1),
              registrationToken: faker.lorem.slug(1),
              isActive: faker.datatype.boolean(),
              roles: {
                data: [
                  ...new Array(
                    faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map((_) => ({
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {
                    name: faker.person.fullName(),
                    code: faker.lorem.slug(1),
                    description: faker.lorem.slug(1),
                    users: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      })),
                    },
                    permissions: {
                      data: [
                        ...new Array(
                          faker.number.int({
                            min: 1,
                            max: MAX_ARRAY_LENGTH,
                          })
                        ).keys(),
                      ].map((_) => ({
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {
                          action: faker.lorem.slug(1),
                          subject: faker.lorem.slug(1),
                          properties: null,
                          conditions: null,
                          role: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          createdAt: faker.date.past(),
                          updatedAt: faker.date.past(),
                          createdBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                          updatedBy: {
                            data: {
                              id: faker.number.int({
                                min: undefined,
                                max: undefined,
                              }),
                              attributes: {},
                            },
                          },
                        },
                      })),
                    },
                    createdAt: faker.date.past(),
                    updatedAt: faker.date.past(),
                    createdBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                    updatedBy: {
                      data: {
                        id: faker.number.int({
                          min: undefined,
                          max: undefined,
                        }),
                        attributes: {},
                      },
                    },
                  },
                })),
              },
              blocked: faker.datatype.boolean(),
              preferedLanguage: faker.lorem.slug(1),
              createdAt: faker.date.past(),
              updatedAt: faker.date.past(),
              createdBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
              updatedBy: {
                data: {
                  id: faker.number.int({ min: undefined, max: undefined }),
                  attributes: {},
                },
              },
            },
          },
        },
        updatedBy: {
          data: {
            id: faker.number.int({ min: undefined, max: undefined }),
            attributes: {},
          },
        },
      },
    },
    meta: {},
  };
}

export function getGetI18NLocales400Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetI18NLocales401Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetI18NLocales403Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetI18NLocales404Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetI18NLocales500Response() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostUpload200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => null);
}

export function getPostUploadIdId200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => null);
}

export function getGetUploadFiles200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => null);
}

export function getGetUploadFilesId200Response() {
  return null;
}

export function getDeleteUploadFilesId200Response() {
  return null;
}

export function getGetConnectProviderdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthLocal200Response() {
  return {
    jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
    user: {
      id: 1,
      username: "foo.bar",
      email: "foo.bar@strapi.io",
      provider: "local",
      confirmed: true,
      blocked: faker.datatype.boolean(),
      createdAt: "2022-06-02T08:32:06.258Z",
      updatedAt: "2022-06-02T08:32:06.267Z",
    },
  };
}

export function getPostAuthLocaldefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthLocalRegister200Response() {
  return {
    jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
    user: {
      id: 1,
      username: "foo.bar",
      email: "foo.bar@strapi.io",
      provider: "local",
      confirmed: true,
      blocked: faker.datatype.boolean(),
      createdAt: "2022-06-02T08:32:06.258Z",
      updatedAt: "2022-06-02T08:32:06.267Z",
    },
  };
}

export function getPostAuthLocalRegisterdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetAuthProviderCallback200Response() {
  return {
    jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
    user: {
      id: 1,
      username: "foo.bar",
      email: "foo.bar@strapi.io",
      provider: "local",
      confirmed: true,
      blocked: faker.datatype.boolean(),
      createdAt: "2022-06-02T08:32:06.258Z",
      updatedAt: "2022-06-02T08:32:06.267Z",
    },
  };
}

export function getGetAuthProviderCallbackdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthForgotPassword200Response() {
  return {
    ok: faker.helpers.arrayElement([true]),
  };
}

export function getPostAuthForgotPassworddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthResetPassword200Response() {
  return {
    jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
    user: {
      id: 1,
      username: "foo.bar",
      email: "foo.bar@strapi.io",
      provider: "local",
      confirmed: true,
      blocked: faker.datatype.boolean(),
      createdAt: "2022-06-02T08:32:06.258Z",
      updatedAt: "2022-06-02T08:32:06.267Z",
    },
  };
}

export function getPostAuthResetPassworddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthChangePassword200Response() {
  return {
    jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
    user: {
      id: 1,
      username: "foo.bar",
      email: "foo.bar@strapi.io",
      provider: "local",
      confirmed: true,
      blocked: faker.datatype.boolean(),
      createdAt: "2022-06-02T08:32:06.258Z",
      updatedAt: "2022-06-02T08:32:06.267Z",
    },
  };
}

export function getPostAuthChangePassworddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetAuthEmailConfirmationdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostAuthSendEmailConfirmation200Response() {
  return {
    email: faker.internet.email(),
    sent: faker.helpers.arrayElement([true]),
  };
}

export function getPostAuthSendEmailConfirmationdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersPermissionsPermissions200Response() {
  return {
    permissions: [...new Array(5).keys()]
      .map((_) => ({
        [faker.lorem.word()]: {
          controllers: [...new Array(5).keys()]
            .map((_) => ({
              [faker.lorem.word()]: [...new Array(5).keys()]
                .map((_) => ({
                  [faker.lorem.word()]: {
                    enabled: faker.datatype.boolean(),
                    policy: faker.lorem.slug(1),
                  },
                }))
                .reduce((acc, next) => Object.assign(acc, next), {}),
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
  };
}

export function getGetUsersPermissionsPermissionsdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersPermissionsRoles200Response() {
  return {
    roles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      createdAt: faker.date.past(),
      updatedAt: faker.date.past(),
      nb_users: faker.number.int({ min: undefined, max: undefined }),
    })),
  };
}

export function getGetUsersPermissionsRolesdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostUsersPermissionsRoles200Response() {
  return {
    ok: faker.helpers.arrayElement([true]),
  };
}

export function getPostUsersPermissionsRolesdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersPermissionsRolesId200Response() {
  return {
    role: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      createdAt: faker.date.past(),
      updatedAt: faker.date.past(),
    },
  };
}

export function getGetUsersPermissionsRolesIddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutUsersPermissionsRolesRole200Response() {
  return {
    ok: faker.helpers.arrayElement([true]),
  };
}

export function getPutUsersPermissionsRolesRoledefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteUsersPermissionsRolesRole200Response() {
  return {
    ok: faker.helpers.arrayElement([true]),
  };
}

export function getDeleteUsersPermissionsRolesRoledefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsers200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
  }));
}

export function getGetUsersdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPostUsers201Response() {
  return {
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
    role: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      createdAt: faker.date.past(),
      updatedAt: faker.date.past(),
    },
  };
}

export function getPostUsersdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersId200Response() {
  return {
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
  };
}

export function getGetUsersIddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getPutUsersId200Response() {
  return {
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
    role: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      description: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
      createdAt: faker.date.past(),
      updatedAt: faker.date.past(),
    },
  };
}

export function getPutUsersIddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getDeleteUsersId200Response() {
  return {
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
  };
}

export function getDeleteUsersIddefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersMe200Response() {
  return {
    id: 1,
    username: "foo.bar",
    email: "foo.bar@strapi.io",
    provider: "local",
    confirmed: true,
    blocked: faker.datatype.boolean(),
    createdAt: "2022-06-02T08:32:06.258Z",
    updatedAt: "2022-06-02T08:32:06.267Z",
  };
}

export function getGetUsersMedefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

export function getGetUsersCount200Response() {
  return faker.number.int({ min: undefined, max: undefined });
}

export function getGetUsersCountdefaultResponse() {
  return {
    data: faker.helpers.arrayElement([
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({})),
    ]),
    error: {
      status: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      message: faker.lorem.slug(1),
      details: {},
    },
  };
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const server = setupServer(...handlers);
  server.listen();
};
