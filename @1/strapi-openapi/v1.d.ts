/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/{provider}/callback": {
    /** Default Callback from provider auth */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/change-password": {
    /** Update user's own password */
    post: {
      requestBody: {
        content: {
          "application/json": {
            currentPassword: string;
            password: string;
            passwordConfirmation: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/email-confirmation": {
    /** Confirm user email */
    get: {
      parameters: {
        query: {
          /** @description confirmation token received by email */
          confirmation?: string;
        };
      };
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: never;
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/forgot-password": {
    /** Send rest password email */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "email": "foo.bar@strapi.io"
           * }
           */
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns ok */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local": {
    /**
     * Local login 
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "identifier": "foobar",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            identifier?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Connection */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local/register": {
    /**
     * Register a user 
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foobar",
           *   "email": "foo.bar@strapi.io",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            email?: string;
            password?: string;
            username?: string;
          };
        };
      };
      responses: {
        /** @description Successfull registration */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /** Rest user password */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "password": "Test1234",
           *   "passwordConfirmation": "Test1234",
           *   "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           * }
           */
          "application/json": {
            code?: string;
            password?: string;
            passwordConfirmation?: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/send-email-confirmation": {
    /** Send confirmation email */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          content: {
            "application/json": {
              email?: string;
              /** @enum {string} */
              sent?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/comments/{relation}/comment/{commentId}": {
    put: operations["put/comments/{relation}/comment/{commentId}"];
    delete: operations["delete/comments/{relation}/comment/{commentId}"];
  };
  "/comments/{relation}/comment/{commentId}/report-abuse": {
    post: operations["post/comments/{relation}/comment/{commentId}/report-abuse"];
  };
  "/connect/{provider}": {
    /**
     * Login with a provider 
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Redirect response */
        301: never;
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/i18n/locales": {
    get: operations["get/i18n/locales"];
  };
  "/opportunities": {
    get: operations["get/opportunities"];
    post: operations["post/opportunities"];
  };
  "/opportunities/{id}": {
    get: operations["get/opportunities/{id}"];
    put: operations["put/opportunities/{id}"];
    delete: operations["delete/opportunities/{id}"];
  };
  "/opportunities/{id}/localizations": {
    post: operations["post/opportunities/{id}/localizations"];
  };
  "/passwordless/login": {
    /** Login a user with one time password */
    get: {
      parameters: {
        query: {
          /** @description Login token from the email */
          loginToken: string;
        };
      };
      responses: {
        /** @description Connection */
        200: {
          content: {
            "application/json": components["schemas"]["Passwordless-User"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/passwordless/send-link": {
    /** Send an email to user with login link */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Passwordless-SendLinkRequest"];
        };
      };
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          content: {
            "application/json": components["schemas"]["Passwordless-EmailSent"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/upload": {
    /** @description Upload files */
    post: {
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string;
            files: (string)[];
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string;
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string;
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string;
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": (components["schemas"]["UploadFile"])[];
          };
        };
      };
    };
  };
  "/upload?id={id}": {
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string;
        };
      };
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            fileInfo?: {
              alternativeText?: string;
              caption?: string;
              name?: string;
            };
            /** Format: binary */
            files?: string;
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": (components["schemas"]["UploadFile"])[];
          };
        };
      };
    };
  };
  "/upload/files": {
    get: {
      responses: {
        /** @description Get a list of files */
        200: {
          content: {
            "application/json": (components["schemas"]["UploadFile"])[];
          };
        };
      };
    };
  };
  "/upload/files/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Get a specific file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Delete a file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
  };
  "/users": {
    /** Get list of users */
    get: {
      responses: {
        /** @description Returns an array of users */
        200: {
          content: {
            "application/json": (components["schemas"]["Users-Permissions-User"])[];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a user */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            password: string;
            username: string;
          };
        };
      };
      responses: {
        /** @description Returns created user info */
        201: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/permissions": {
    /** Get default generated permissions */
    get: {
      responses: {
        /** @description Returns the permissions tree */
        200: {
          content: {
            "application/json": {
              permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles": {
    /** List roles */
    get: {
      responses: {
        /** @description Returns list of roles */
        200: {
          content: {
            "application/json": {
              roles?: (components["schemas"]["Users-Permissions-Role"] & {
                  nb_users?: number;
                })[];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a role */
    post: {
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{id}": {
    /** Get a role */
    get: {
      parameters: {
        path: {
          /** @description role Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns the role */
        200: {
          content: {
            "application/json": {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{role}": {
    /** Update a role */
    put: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a role */
    delete: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get a user */
    get: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns a user */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a user */
    put: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            password: string;
            username: string;
          };
        };
      };
      responses: {
        /** @description Returns updated user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a user */
    delete: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns deleted user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/count": {
    /** Get user count */
    get: {
      responses: {
        /** @description Returns a number */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** Get authenticated user info */
    get: {
      responses: {
        /** @description Returns user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CommentsComment: {
      approvalStatus?: string;
      authorAvatar?: string;
      /** Format: email */
      authorEmail?: string;
      authorId?: string;
      authorName?: string;
      authorUser?: {
        data?: {
          attributes?: {
            blocked?: boolean;
            confirmationToken?: string;
            confirmed?: boolean;
            /** Format: date-time */
            createdAt?: string;
            createdBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            /** Format: email */
            email?: string;
            provider?: string;
            resetPasswordToken?: string;
            role?: {
              data?: {
                attributes?: {
                  /** Format: date-time */
                  createdAt?: string;
                  createdBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  description?: string;
                  name?: string;
                  permissions?: {
                    data?: ({
                        attributes?: {
                          action?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          createdBy?: {
                            data?: {
                              attributes?: {
                                blocked?: boolean;
                                /** Format: date-time */
                                createdAt?: string;
                                createdBy?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                                /** Format: email */
                                email?: string;
                                firstname?: string;
                                isActive?: boolean;
                                lastname?: string;
                                preferedLanguage?: string;
                                registrationToken?: string;
                                resetPasswordToken?: string;
                                roles?: {
                                  data?: ({
                                      attributes?: {
                                        code?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        createdBy?: {
                                          data?: {
                                            attributes?: Record<string, never>;
                                            id?: number;
                                          };
                                        };
                                        description?: string;
                                        name?: string;
                                        permissions?: {
                                          data?: ({
                                              attributes?: {
                                                action?: string;
                                                conditions?: unknown;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                                properties?: unknown;
                                                role?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                                subject?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                updatedBy?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                              };
                                              id?: number;
                                            })[];
                                        };
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        updatedBy?: {
                                          data?: {
                                            attributes?: Record<string, never>;
                                            id?: number;
                                          };
                                        };
                                        users?: {
                                          data?: ({
                                              attributes?: Record<string, never>;
                                              id?: number;
                                            })[];
                                        };
                                      };
                                      id?: number;
                                    })[];
                                };
                                /** Format: date-time */
                                updatedAt?: string;
                                updatedBy?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                                username?: string;
                              };
                              id?: number;
                            };
                          };
                          role?: {
                            data?: {
                              attributes?: Record<string, never>;
                              id?: number;
                            };
                          };
                          /** Format: date-time */
                          updatedAt?: string;
                          updatedBy?: {
                            data?: {
                              attributes?: Record<string, never>;
                              id?: number;
                            };
                          };
                        };
                        id?: number;
                      })[];
                  };
                  type?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  updatedBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  users?: {
                    data?: ({
                        attributes?: Record<string, never>;
                        id?: number;
                      })[];
                  };
                };
                id?: number;
              };
            };
            /** Format: date-time */
            updatedAt?: string;
            updatedBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            username?: string;
          };
          id?: number;
        };
      };
      blocked?: boolean;
      blockedThread?: boolean;
      blockReason?: string;
      content: string;
      /** Format: date-time */
      createdAt?: string;
      createdBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
      isAdminComment?: boolean;
      related?: string;
      removed?: boolean;
      reports?: {
        data?: ({
            attributes?: {
              content?: string;
              /** Format: date-time */
              createdAt?: string;
              createdBy?: {
                data?: {
                  attributes?: Record<string, never>;
                  id?: number;
                };
              };
              /** @enum {string} */
              reason?: "BAD_LANGUAGE" | "DISCRIMINATION" | "OTHER";
              related?: {
                data?: {
                  attributes?: {
                    approvalStatus?: string;
                    authorAvatar?: string;
                    /** Format: email */
                    authorEmail?: string;
                    authorId?: string;
                    authorName?: string;
                    authorUser?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    blocked?: boolean;
                    blockedThread?: boolean;
                    blockReason?: string;
                    content?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    createdBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    isAdminComment?: boolean;
                    related?: string;
                    removed?: boolean;
                    reports?: {
                      data?: ({
                          attributes?: Record<string, never>;
                          id?: number;
                        })[];
                    };
                    threadOf?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    /** Format: date-time */
                    updatedAt?: string;
                    updatedBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                  };
                  id?: number;
                };
              };
              resolved?: boolean;
              /** Format: date-time */
              updatedAt?: string;
              updatedBy?: {
                data?: {
                  attributes?: Record<string, never>;
                  id?: number;
                };
              };
            };
            id?: number;
          })[];
      };
      threadOf?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
      /** Format: date-time */
      updatedAt?: string;
      updatedBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
    };
    CommentsCommentReport: {
      content?: string;
      /** Format: date-time */
      createdAt?: string;
      createdBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
      /** @enum {string} */
      reason: "BAD_LANGUAGE" | "DISCRIMINATION" | "OTHER";
      related?: {
        data?: {
          attributes?: {
            approvalStatus?: string;
            authorAvatar?: string;
            /** Format: email */
            authorEmail?: string;
            authorId?: string;
            authorName?: string;
            authorUser?: {
              data?: {
                attributes?: {
                  blocked?: boolean;
                  confirmationToken?: string;
                  confirmed?: boolean;
                  /** Format: date-time */
                  createdAt?: string;
                  createdBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  /** Format: email */
                  email?: string;
                  provider?: string;
                  resetPasswordToken?: string;
                  role?: {
                    data?: {
                      attributes?: {
                        /** Format: date-time */
                        createdAt?: string;
                        createdBy?: {
                          data?: {
                            attributes?: Record<string, never>;
                            id?: number;
                          };
                        };
                        description?: string;
                        name?: string;
                        permissions?: {
                          data?: ({
                              attributes?: {
                                action?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                createdBy?: {
                                  data?: {
                                    attributes?: {
                                      blocked?: boolean;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      createdBy?: {
                                        data?: {
                                          attributes?: Record<string, never>;
                                          id?: number;
                                        };
                                      };
                                      /** Format: email */
                                      email?: string;
                                      firstname?: string;
                                      isActive?: boolean;
                                      lastname?: string;
                                      preferedLanguage?: string;
                                      registrationToken?: string;
                                      resetPasswordToken?: string;
                                      roles?: {
                                        data?: ({
                                            attributes?: {
                                              code?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  attributes?: Record<string, never>;
                                                  id?: number;
                                                };
                                              };
                                              description?: string;
                                              name?: string;
                                              permissions?: {
                                                data?: ({
                                                    attributes?: {
                                                      action?: string;
                                                      conditions?: unknown;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          attributes?: Record<string, never>;
                                                          id?: number;
                                                        };
                                                      };
                                                      properties?: unknown;
                                                      role?: {
                                                        data?: {
                                                          attributes?: Record<string, never>;
                                                          id?: number;
                                                        };
                                                      };
                                                      subject?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      updatedBy?: {
                                                        data?: {
                                                          attributes?: Record<string, never>;
                                                          id?: number;
                                                        };
                                                      };
                                                    };
                                                    id?: number;
                                                  })[];
                                              };
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              updatedBy?: {
                                                data?: {
                                                  attributes?: Record<string, never>;
                                                  id?: number;
                                                };
                                              };
                                              users?: {
                                                data?: ({
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  })[];
                                              };
                                            };
                                            id?: number;
                                          })[];
                                      };
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      updatedBy?: {
                                        data?: {
                                          attributes?: Record<string, never>;
                                          id?: number;
                                        };
                                      };
                                      username?: string;
                                    };
                                    id?: number;
                                  };
                                };
                                role?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                                /** Format: date-time */
                                updatedAt?: string;
                                updatedBy?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                              };
                              id?: number;
                            })[];
                        };
                        type?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        updatedBy?: {
                          data?: {
                            attributes?: Record<string, never>;
                            id?: number;
                          };
                        };
                        users?: {
                          data?: ({
                              attributes?: Record<string, never>;
                              id?: number;
                            })[];
                        };
                      };
                      id?: number;
                    };
                  };
                  /** Format: date-time */
                  updatedAt?: string;
                  updatedBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  username?: string;
                };
                id?: number;
              };
            };
            blocked?: boolean;
            blockedThread?: boolean;
            blockReason?: string;
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            createdBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            isAdminComment?: boolean;
            related?: string;
            removed?: boolean;
            reports?: {
              data?: ({
                  attributes?: {
                    content?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    createdBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    /** @enum {string} */
                    reason?: "BAD_LANGUAGE" | "DISCRIMINATION" | "OTHER";
                    related?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    resolved?: boolean;
                    /** Format: date-time */
                    updatedAt?: string;
                    updatedBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                  };
                  id?: number;
                })[];
            };
            threadOf?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            /** Format: date-time */
            updatedAt?: string;
            updatedBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
          };
          id?: number;
        };
      };
      resolved?: boolean;
      /** Format: date-time */
      updatedAt?: string;
      updatedBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
    };
    CommentsCommentReportRequest: {
      data: {
        content?: string;
        /** @enum {string} */
        reason: "BAD_LANGUAGE" | "DISCRIMINATION" | "OTHER";
        /** @example string or id */
        related?: number | string;
        resolved?: boolean;
      };
    };
    CommentsCommentReportResponse: {
      data?: components["schemas"]["CommentsCommentReportResponseDataObject"];
      meta?: Record<string, never>;
    };
    CommentsCommentReportResponseDataObject: {
      attributes?: components["schemas"]["CommentsCommentReport"];
      id?: number;
    };
    CommentsCommentRequest: {
      data: {
        approvalStatus?: string;
        authorAvatar?: string;
        /** Format: email */
        authorEmail?: string;
        authorId?: string;
        authorName?: string;
        /** @example string or id */
        authorUser?: number | string;
        blocked?: boolean;
        blockedThread?: boolean;
        blockReason?: string;
        content: string;
        isAdminComment?: boolean;
        related?: string;
        removed?: boolean;
        reports?: (number | string)[];
        /** @example string or id */
        threadOf?: number | string;
      };
    };
    CommentsCommentResponse: {
      data?: components["schemas"]["CommentsCommentResponseDataObject"];
      meta?: Record<string, never>;
    };
    CommentsCommentResponseDataObject: {
      attributes?: components["schemas"]["CommentsComment"];
      id?: number;
    };
    Error: {
      data?: Record<string, never> | (Record<string, never>)[];
      error: {
        details?: Record<string, never>;
        message?: string;
        name?: string;
        status?: number;
      };
    };
    I18NLocale: {
      code?: string;
      /** Format: date-time */
      createdAt?: string;
      createdBy?: {
        data?: {
          attributes?: {
            blocked?: boolean;
            /** Format: date-time */
            createdAt?: string;
            createdBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            /** Format: email */
            email?: string;
            firstname?: string;
            isActive?: boolean;
            lastname?: string;
            preferedLanguage?: string;
            registrationToken?: string;
            resetPasswordToken?: string;
            roles?: {
              data?: ({
                  attributes?: {
                    code?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    createdBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    description?: string;
                    name?: string;
                    permissions?: {
                      data?: ({
                          attributes?: {
                            action?: string;
                            conditions?: unknown;
                            /** Format: date-time */
                            createdAt?: string;
                            createdBy?: {
                              data?: {
                                attributes?: Record<string, never>;
                                id?: number;
                              };
                            };
                            properties?: unknown;
                            role?: {
                              data?: {
                                attributes?: Record<string, never>;
                                id?: number;
                              };
                            };
                            subject?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            updatedBy?: {
                              data?: {
                                attributes?: Record<string, never>;
                                id?: number;
                              };
                            };
                          };
                          id?: number;
                        })[];
                    };
                    /** Format: date-time */
                    updatedAt?: string;
                    updatedBy?: {
                      data?: {
                        attributes?: Record<string, never>;
                        id?: number;
                      };
                    };
                    users?: {
                      data?: ({
                          attributes?: Record<string, never>;
                          id?: number;
                        })[];
                    };
                  };
                  id?: number;
                })[];
            };
            /** Format: date-time */
            updatedAt?: string;
            updatedBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            username?: string;
          };
          id?: number;
        };
      };
      name?: string;
      /** Format: date-time */
      updatedAt?: string;
      updatedBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
    };
    I18NLocaleResponse: {
      data?: components["schemas"]["I18NLocaleResponseDataObject"];
      meta?: Record<string, never>;
    };
    I18NLocaleResponseDataObject: {
      attributes?: components["schemas"]["I18NLocale"];
      id?: number;
    };
    Opportunity: {
      cover?: {
        data?: {
          attributes?: {
            alternativeText?: string;
            caption?: string;
            /** Format: date-time */
            createdAt?: string;
            createdBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            ext?: string;
            folder?: {
              data?: {
                attributes?: {
                  children?: {
                    data?: ({
                        attributes?: Record<string, never>;
                        id?: number;
                      })[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  createdBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  files?: {
                    data?: ({
                        attributes?: {
                          alternativeText?: string;
                          caption?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          createdBy?: {
                            data?: {
                              attributes?: {
                                blocked?: boolean;
                                /** Format: date-time */
                                createdAt?: string;
                                createdBy?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                                /** Format: email */
                                email?: string;
                                firstname?: string;
                                isActive?: boolean;
                                lastname?: string;
                                preferedLanguage?: string;
                                registrationToken?: string;
                                resetPasswordToken?: string;
                                roles?: {
                                  data?: ({
                                      attributes?: {
                                        code?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        createdBy?: {
                                          data?: {
                                            attributes?: Record<string, never>;
                                            id?: number;
                                          };
                                        };
                                        description?: string;
                                        name?: string;
                                        permissions?: {
                                          data?: ({
                                              attributes?: {
                                                action?: string;
                                                conditions?: unknown;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                                properties?: unknown;
                                                role?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                                subject?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                updatedBy?: {
                                                  data?: {
                                                    attributes?: Record<string, never>;
                                                    id?: number;
                                                  };
                                                };
                                              };
                                              id?: number;
                                            })[];
                                        };
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        updatedBy?: {
                                          data?: {
                                            attributes?: Record<string, never>;
                                            id?: number;
                                          };
                                        };
                                        users?: {
                                          data?: ({
                                              attributes?: Record<string, never>;
                                              id?: number;
                                            })[];
                                        };
                                      };
                                      id?: number;
                                    })[];
                                };
                                /** Format: date-time */
                                updatedAt?: string;
                                updatedBy?: {
                                  data?: {
                                    attributes?: Record<string, never>;
                                    id?: number;
                                  };
                                };
                                username?: string;
                              };
                              id?: number;
                            };
                          };
                          ext?: string;
                          folder?: {
                            data?: {
                              attributes?: Record<string, never>;
                              id?: number;
                            };
                          };
                          folderPath?: string;
                          formats?: unknown;
                          hash?: string;
                          height?: number;
                          mime?: string;
                          name?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: ({
                                attributes?: Record<string, never>;
                                id?: number;
                              })[];
                          };
                          /** Format: float */
                          size?: number;
                          /** Format: date-time */
                          updatedAt?: string;
                          updatedBy?: {
                            data?: {
                              attributes?: Record<string, never>;
                              id?: number;
                            };
                          };
                          url?: string;
                          width?: number;
                        };
                        id?: number;
                      })[];
                  };
                  name?: string;
                  parent?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                  path?: string;
                  pathId?: number;
                  /** Format: date-time */
                  updatedAt?: string;
                  updatedBy?: {
                    data?: {
                      attributes?: Record<string, never>;
                      id?: number;
                    };
                  };
                };
                id?: number;
              };
            };
            folderPath?: string;
            formats?: unknown;
            hash?: string;
            height?: number;
            mime?: string;
            name?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: ({
                  attributes?: Record<string, never>;
                  id?: number;
                })[];
            };
            /** Format: float */
            size?: number;
            /** Format: date-time */
            updatedAt?: string;
            updatedBy?: {
              data?: {
                attributes?: Record<string, never>;
                id?: number;
              };
            };
            url?: string;
            width?: number;
          };
          id?: number;
        };
      };
      /** Format: date-time */
      createdAt?: string;
      createdBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
      description: string;
      /** Format: date */
      expireAt: string;
      locale?: string;
      localizations?: {
        data?: (components["schemas"]["Opportunity"])[];
      };
      /** Format: date-time */
      publishedAt?: string;
      slug?: string;
      title: string;
      /** Format: date-time */
      updatedAt?: string;
      updatedBy?: {
        data?: {
          attributes?: Record<string, never>;
          id?: number;
        };
      };
    };
    OpportunityListResponse: {
      data?: (components["schemas"]["OpportunityListResponseDataItem"])[];
      meta?: {
        pagination?: {
          page?: number;
          pageCount?: number;
          pageSize?: number;
          total?: number;
        };
      };
    };
    OpportunityListResponseDataItem: {
      attributes?: components["schemas"]["Opportunity"];
      id?: number;
    };
    OpportunityListResponseDataItemLocalized: {
      attributes?: components["schemas"]["Opportunity"];
      id?: number;
    };
    OpportunityLocalizationListResponse: {
      data?: (components["schemas"]["OpportunityListResponseDataItemLocalized"])[];
      meta?: {
        pagination?: {
          page?: number;
          pageCount?: number;
          pageSize?: number;
          total?: number;
        };
      };
    };
    OpportunityLocalizationRequest: {
      /** @example string or id */
      cover?: number | string;
      description: string;
      /** Format: date */
      expireAt: string;
      locale: string;
      slug?: string;
      title: string;
    };
    OpportunityLocalizationResponse: {
      data?: components["schemas"]["OpportunityResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    OpportunityRequest: {
      data: {
        /** @example string or id */
        cover?: number | string;
        description: string;
        /** Format: date */
        expireAt: string;
        locale?: string;
        slug?: string;
        title: string;
      };
    };
    OpportunityResponse: {
      data?: components["schemas"]["OpportunityResponseDataObject"];
      meta?: Record<string, never>;
    };
    OpportunityResponseDataObject: {
      attributes?: components["schemas"]["Opportunity"];
      id?: number;
    };
    OpportunityResponseDataObjectLocalized: {
      attributes?: components["schemas"]["Opportunity"];
      id?: number;
    };
    "Passwordless-EmailSent": {
      email?: string;
      /** @example true */
      sent?: boolean;
      username?: string | null;
    };
    "Passwordless-SendLinkRequest": {
      /**
       * @description context of authentification 
       * @example {
       *   "currentUrl": "localhost"
       * }
       */
      context?: Record<string, never>;
      /**
       * @description the user email 
       * @example foo@bar.com
       */
      email?: string;
      /**
       * @description username for new user 
       * @example foo
       */
      username?: string;
    };
    "Passwordless-User": components["schemas"]["Users-Permissions-UserRegistration"] & {
      context?: Record<string, never>;
    };
    UploadFile: {
      alternativeText?: string;
      caption?: string;
      /** Format: date-time */
      createdAt?: string;
      ext?: string;
      formats?: number;
      hash?: string;
      /** Format: integer */
      height?: number;
      id?: number;
      mime?: string;
      name?: string;
      previewUrl?: string;
      provider?: string;
      provider_metadata?: Record<string, never>;
      /** Format: double */
      size?: number;
      /** Format: date-time */
      updatedAt?: string;
      url?: string;
      /** Format: integer */
      width?: number;
    };
    "Users-Permissions-PermissionsTree": {
      [key: string]: ({
        /** @description every controller of the api */
        controllers?: {
          [key: string]: ({
            [key: string]: {
              enabled?: boolean;
              policy?: string;
            } | undefined;
          }) | undefined;
        };
      }) | undefined;
    };
    "Users-Permissions-Role": {
      /** Format: date-time */
      createdAt?: string;
      description?: string;
      id?: number;
      name?: string;
      type?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-User": {
      /** @example false */
      blocked?: boolean;
      /** @example true */
      confirmed?: boolean;
      /**
       * Format: date-time 
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string;
      /** @example foo.bar@strapi.io */
      email?: string;
      /** @example 1 */
      id?: number;
      /** @example local */
      provider?: string;
      /**
       * Format: date-time 
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string;
      /** @example foo.bar */
      username?: string;
    };
    "Users-Permissions-UserRegistration": {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string;
      user?: components["schemas"]["Users-Permissions-User"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    "Users-Permissions-RoleRequest": {
      content: {
        /**
         * @example {
         *   "name": "foo",
         *   "description": "role foo",
         *   "permissions": {
         *     "api::content-type.content-type": {
         *       "controllers": {
         *         "controllerA": {
         *           "find": {
         *             "enabled": true
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         */
        "application/json": {
          description?: string;
          name?: string;
          permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
          type?: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "put/comments/{relation}/comment/{commentId}": {
    parameters: {
      path: {
        relation: number;
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentsCommentRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentsCommentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/comments/{relation}/comment/{commentId}": {
    parameters: {
      path: {
        relation: number;
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/comments/{relation}/comment/{commentId}/report-abuse": {
    parameters: {
      path: {
        relation: number;
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentsCommentRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentsCommentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/i18n/locales": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["I18NLocaleResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/opportunities": {
    parameters: {
      query: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/opportunities": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/opportunities/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/opportunities/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/opportunities/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/opportunities/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpportunityLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
